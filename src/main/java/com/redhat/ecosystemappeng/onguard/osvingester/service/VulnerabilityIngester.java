/*
 * Copyright ${year} Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.redhat.ecosystemappeng.onguard.osvingester.service;

import java.io.IOException;

import org.jboss.logging.Logger;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;

import io.quarkus.redis.datasource.RedisDataSource;
import io.quarkus.redis.datasource.value.ValueCommands;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class VulnerabilityIngester {

  final private ValueCommands<String, String> vulnCommands;
  final private ObjectMapper objectMapper;

  private final static Logger LOGGER = Logger.getLogger(VulnerabilityIngester.class);

  VulnerabilityIngester(RedisDataSource ds, ObjectMapper objectMapper) {
    this.vulnCommands = ds.value(String.class);
    this.objectMapper = objectMapper;
  }

  public String save(String source, byte[] content) {
    JsonNode obj;
    try {
      obj = objectMapper.readTree(content);
      var id = obj.get("id").asText();
      var hasSeverity = obj.get("severity") != null;
      if (hasSeverity) {
        vulnCommands.set(vulnKey(id), obj.toString());
      } else {
        var existingRaw = vulnCommands.get(vulnKey(id));
        if (existingRaw == null) {
          vulnCommands.set(vulnKey(id), obj.toString());
        } else {
          var existingHasSeverity = objectMapper.readTree(existingRaw).has("severity");
          if (!existingHasSeverity) {
            vulnCommands.set(vulnKey(id), obj.toString());
          }
        }
      }
      if (!hasSeverity) {
        return id;
      }
      return null;
    } catch (IOException e) {
      LOGGER.errorf("Unable to parse Json vulnerability: %s", source, e);
      return null;
    }
  }

  public String get(String vulnId) {
    return vulnCommands.get(vulnKey(vulnId));
  }

  public boolean reconcile(String vulnId) {
    var vuln = get(vulnId);
    try {
      var obj = objectMapper.readTree(vuln);
      var aliases = obj.withArray("aliases");
      for (var aliasId : aliases) {
        var alias = get(aliasId.asText());
        if (alias != null) {
          try {
            var aliasObj = objectMapper.readTree(alias);
            if (aliasObj.has("severity")) {
              LOGGER.debugf("Must reconcile %s and %s", vulnId, aliasId);
              var merged = mergeSeverity(obj, aliasObj);
              vulnCommands.set(vulnKey(vulnId), merged.toPrettyString());
              return true;
            }
          } catch (JsonProcessingException e) {
            LOGGER.error("Unable to parse Json vulnerability: %s", aliasId, e);
          }
        }
      }
    } catch (JsonProcessingException e) {
      LOGGER.error("Unable to parse Json vulnerability: %s", vulnId, e);
    }
    return false;
  }

  private String vulnKey(String id) {
    return "vuln:" + id;
  }

  private JsonNode mergeSeverity(JsonNode base, JsonNode source) {
    var merged = JsonNodeFactory.instance.objectNode();
    base.fields().forEachRemaining(entry -> merged.set(entry.getKey(), entry.getValue()));
    merged.set("severity", source.get("severity"));
    return merged;
  }
}
